How to call paceval.-library functions from PHP
-----------------------------------------------

Since PHP 7.4 it is possible to easily call C functions from 
shared libraries (.DLL or .so).
Potentially you will have to change the php.ini to enable FFI.

Links & Literature
[1] https://en.wikipedia.org/wiki/Foreign_function_interface
[2] https://wiki.php.net/rfc/ffi

In case the following example-code sniplet does not work for you,
please contact us at info@paceval.com.


example-code sniplet for ARM64 which you can easily adopt:
----------------------------------------------------------------------------------------

<?php
$paceval_ffi = FFI::cdef("
    bool pacevalLibrary_Initialize(const char* initString_in);
    bool pacevalLibrary_Free();
    void* pacevalLibrary_CreateComputation(const char* functionString_in,
        unsigned long numberOfVariables_in, const char* variables_in, bool useInterval_in, void* functionPtr_in);
    double pacevalLibrary_dGetComputationResult(void* handle_pacevalComputation_in, double values_in[],
        double* trustedMinResult_out, double* trustedMaxResult_out);
    bool pacevalLibrary_DeleteComputation(void* handle_pacevalComputation_in);
    ", 
    "/usr/bin/libpacevalARM64_sharedLIB.so");

// call C pacevalLibrary_CreateComputation() to create a computation-object in memory, run a computation
// with trusted intervals and delete the computation-object from memory
$success = (bool) $paceval_ffi->pacevalLibrary_Initialize(null);
var_dump($success);

$valuesVariablesArray = FFI::new("double[2]");
$valuesVariablesArray[0] = 0.5;
$valuesVariablesArray[1] = 2.0;
$trustedMinResult = FFI::new("double"); 
$trustedMaxResult = FFI::new("double");

$handle_pacevalComputation = $paceval_ffi->pacevalLibrary_CreateComputation("-sin(x*cos(x))^(1/y)", 
        2, "x y", true, null);
var_dump($handle_pacevalComputation);

$result = $paceval_ffi->pacevalLibrary_dGetComputationResult($handle_pacevalComputation, $valuesVariablesArray,
        FFI::addr($trustedMinResult), FFI::addr($trustedMaxResult));
var_dump($result);           //-0.65180178245228
var_dump($trustedMinResult); //-0.65180178245231
var_dump($trustedMaxResult); //-0.65180178245225

$success = (bool) $paceval_ffi->pacevalLibrary_DeleteComputation($handle_pacevalComputation);
var_dump($success);

$success = (bool) $paceval_ffi->pacevalLibrary_Free();
var_dump($success);
?> 



